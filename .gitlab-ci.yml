stages:
  - build
  - test
  - deploy

variables:
  DEV_BRANCH: "main"
  STAGING_BRANCH: "staging"
  PROD_BRANCH: "production"
  NPM_VERSION: "7.19.0"
  ANDROID_COMPILE_SDK: "30"
  ANDROID_BUILD_TOOLS: "29.0.3"
  ANDROID_SDK_TOOLS:   "7583922"

build common:
  stage: build
  image: node:16
  tags:
    - docker
  needs: []
  rules:
    - if: "$CI_MERGE_REQUEST_ID != null"
      changes:
        - common/**/*
        - .gitlab-ci.yml
      when: always
  before_script:
    - npm install -g npm@$NPM_VERSION
    - cd common
    - npm ci
  script:
    - npx prettier --check .
    - npx tsc

build mobile:
  stage: build
  image: node:16
  tags:
    - docker
  needs: []
  rules:
    - if: "$CI_MERGE_REQUEST_ID != null || $CI_COMMIT_BRANCH == 'pipeline-build-with-gradle'"
      changes:
        - common/**/*
        - mobile/**/*
        - .gitlab-ci.yml
      when: always
  before_script:
    - apt-get update -y
    - apt-get install -y openjdk-11-jdk-headless
    # install Android SDK: based upon https://about.gitlab.com/blog/2018/10/24/setting-up-gitlab-ci-for-android-projects/
    - apt-get install -y wget tar unzip lib32stdc++6 lib32z1
    - wget --quiet --output-document=android-sdk.zip https://dl.google.com/android/repository/commandlinetools-linux-${ANDROID_SDK_TOOLS}_latest.zip
    - unzip -d android-sdk-linux android-sdk.zip
    - export ANDROID_SDK_ROOT=$PWD/android-sdk-linux
    - cd android-sdk-linux
    - mv cmdline-tools latest && mkdir cmdline-tools && mv latest cmdline-tools/
    - echo y | cmdline-tools/latest/bin/sdkmanager "platforms;android-${ANDROID_COMPILE_SDK}" >/dev/null
    - echo y | cmdline-tools/latest/bin/sdkmanager "platform-tools" >/dev/null
    - echo y | cmdline-tools/latest/bin/sdkmanager "build-tools;${ANDROID_BUILD_TOOLS}" >/dev/null
    - export PATH=$PATH:$PWD/platform-tools/
    - set +o pipefail
    - yes | cmdline-tools/latest/bin/sdkmanager --licenses >/dev/null
    - set -o pipefail
    - cd ../
    # done installing Android SDK
    - npm install -g npm@$NPM_VERSION
    - cd mobile
    - npm uninstall @cbr/common
    - COMMON_PACK_NAME=$(npm pack ../common | tail -n 1)
    - npm install $COMMON_PACK_NAME
  script:
    - npx prettier --check .
    - npm run build debug dev
    - mv android/app/build/outputs/apk/debug/app-debug.apk ../app-debug.apk
  artifacts:
    expire_in: 1 week
    paths:
      - app-debug.apk

build web:
  stage: build
  image: node:16
  tags:
    - docker
  needs: []
  rules:
    # build on merge requests if there are changes
    - if: "$CI_MERGE_REQUEST_ID != null"
      changes:
        - common/**/*
        - web/**/*
        - .gitlab-ci.yml
      when: always
    # build on deployments
    - if: "$CI_COMMIT_BRANCH == $DEV_BRANCH || $CI_COMMIT_BRANCH == $STAGING_BRANCH || $CI_COMMIT_BRANCH == $PROD_BRANCH"
      when: always
  before_script:
    - npm install -g npm@$NPM_VERSION
    - cd common
    - npm ci
    - cd ../web
    - npm ci
  script:
    - npx prettier --check .
    - GENERATE_SOURCEMAP=false npm run build
  after_script:
    - cd web/build && tar -czvf ../../web_build.tar.gz .
  artifacts:
    expire_in: 1 week
    paths:
      - web_build.tar.gz

build server:
  stage: build
  image: python:3.9.1-buster
  services:
    - name: postgres:13.1-alpine
      alias: test_postgres
  tags:
    - docker
  needs: []
  rules:
    - if: "$CI_MERGE_REQUEST_ID != null"
      changes:
        - server/**/*
        - .gitlab-ci.yml
      when: always
    - if: "$CI_COMMIT_BRANCH == $DEV_BRANCH || $CI_COMMIT_BRANCH == $STAGING_BRANCH || $CI_COMMIT_BRANCH == $PROD_BRANCH"
      when: always
  variables:
    DOMAIN: "example.com"
    SECRET_KEY: "test"
    POSTGRES_DB: "cbr"
    POSTGRES_USER: "test"
    POSTGRES_PASSWORD: "test"
    POSTGRES_HOST: "test_postgres"
  before_script:
    - cd server
  script:
    - pip install -r requirements.txt
    - python -m black --check .
    - python manage.py check
    - python manage.py makemigrations --check
    - python manage.py test

test common:
  stage: test
  image: node:16
  tags:
    - docker
  needs: ["build common"]
  rules:
    - if: "$CI_MERGE_REQUEST_ID != null"
      changes:
        - common/**/*
        - .gitlab-ci.yml
      when: always
  before_script:
    - npm install -g npm@$NPM_VERSION
    - cd common
    - npm ci
  script:
    - npm run test-ci
  artifacts:
    expire_in: 1 week
    reports:
      junit:
        - common/junit.xml
      cobertura:
        - common/coverage/cobertura-coverage.xml

test caddy:
  stage: test
  image: caddy:2.4.6
  tags:
    - docker
  needs: []
  rules:
    - if: "$CI_MERGE_REQUEST_ID != null"
      changes:
        - caddy/**/*
        - .gitlab-ci.yml
      when: always
  variables:
    DOMAIN: "example.com"
  script:
    - caddy validate --config caddy/Caddyfile

.deploy-script: &deploy-script
  - cp /var/cbr/.env ./.env
  - docker-compose -f docker-compose.yml -f docker-compose.deploy.yml build
  - docker-compose -f docker-compose.yml -f docker-compose.deploy.yml up --force-recreate -d
  - bash -c 'sleep 10'
  - docker exec cbr_django python manage.py migrate

deploy development:
  environment:
    name: development
    url: https://cbrd.cradleplatform.com
  stage: deploy
  tags:
    - deploy-development
  rules:
    - if: "$CI_MERGE_REQUEST_ID == null && $CI_COMMIT_BRANCH == $DEV_BRANCH"
      when: on_success
  script:
    - *deploy-script

deploy staging:
  environment:
    name: staging
    url: https://cbrs.cradleplatform.com
  stage: deploy
  tags:
    - deploy-staging
  rules:
    - if: "$CI_MERGE_REQUEST_ID == null && $CI_COMMIT_BRANCH == $STAGING_BRANCH"
      when: on_success
  script:
    - *deploy-script

deploy production:
  environment:
    name: production
    url: https://cbr.hopehealthaction.org
  stage: deploy
  tags:
    - deploy-production
  rules:
    - if: "$CI_MERGE_REQUEST_ID == null && $CI_COMMIT_BRANCH == $PROD_BRANCH"
      when: manual
  script:
    - *deploy-script
