stages:
  - build
  - test
  - deploy

variables:
  DEV_BRANCH: "main"
  STAGING_BRANCH: "staging"
  PROD_BRANCH: "production"
  NPM_VERSION: "7.19.0"


build common:
  stage: build
  image: node:14
  tags:
    - docker
  needs: []
  rules:
    - if: "$CI_MERGE_REQUEST_ID != null"
      changes:
        - common/**/*
        - .gitlab-ci.yml
      when: always
    # Always build/test for schedule / manual "Run Pipeline" via web
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_PIPELINE_SOURCE == "web"
  before_script:
    - npm install -g npm@$NPM_VERSION
    - cd common
    - npm ci
  script:
    - npx prettier --check .
    - npx tsc

build mobile:
  stage: build
  image: node:14
  tags:
    - docker
  needs: []
  rules:
    - if: "$CI_MERGE_REQUEST_ID != null"
      changes:
        - common/**/*
        - mobile/**/*
        - .gitlab-ci.yml
      when: always
    # Always build/test for schedule / manual "Run Pipeline" via web
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_PIPELINE_SOURCE == "web"
  before_script:
    - npm install -g npm@$NPM_VERSION
    - cd mobile
    - npm uninstall @cbr/common
    - COMMON_PACK_NAME=$(npm pack ../common | tail -n 1)
    - npm install $COMMON_PACK_NAME
    - npm ci
  script:
    - npx prettier --check .
    - npx expo export --public-url https://ci-build.local

build web:
  stage: build
  image: node:14
  tags:
    - docker
  needs: []
  rules:
    # build on merge requests if there are changes
    - if: "$CI_MERGE_REQUEST_ID != null"
      changes:
        - common/**/*
        - web/**/*
        - .gitlab-ci.yml
      when: always
    # build on deployments
    - if: "$CI_COMMIT_BRANCH == $DEV_BRANCH || $CI_COMMIT_BRANCH == $STAGING_BRANCH || $CI_COMMIT_BRANCH == $PROD_BRANCH"
      when: always
    # Always build/test for schedule / manual "Run Pipeline" via web
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_PIPELINE_SOURCE == "web"
  before_script:
    - npm install -g npm@$NPM_VERSION
    - cd common
    - npm ci
    - cd ../web
    - npm ci
  script:
    - npx prettier --check .
    - GENERATE_SOURCEMAP=false npm run build
  after_script:
    - cd web/build && tar -czvf ../../web_build.tar.gz .
  artifacts:
    expire_in: 1 week
    paths:
      - web_build.tar.gz

build server:
  stage: build
  image: python:3.9.1-buster
  services:
    - name: postgres:13.1-alpine
      alias: test_postgres
  tags:
    - docker
  needs: []
  rules:
    - if: "$CI_MERGE_REQUEST_ID != null"
      changes:
        - server/**/*
        - .gitlab-ci.yml
      when: always
    - if: "$CI_COMMIT_BRANCH == $DEV_BRANCH || $CI_COMMIT_BRANCH == $STAGING_BRANCH || $CI_COMMIT_BRANCH == $PROD_BRANCH"
      when: always
    # Always build/test for schedule / manual "Run Pipeline" via web
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_PIPELINE_SOURCE == "web"
  variables:
    DOMAIN: "example.com"
    SECRET_KEY: "test"
    POSTGRES_DB: "cbr"
    POSTGRES_USER: "test"
    POSTGRES_PASSWORD: "test"
    POSTGRES_HOST: "test_postgres"
  before_script:
    - cd server
  script:
    - pip install -r requirements.txt
    - python -m black --check .
    - python manage.py check
    - python manage.py makemigrations --check
    - python manage.py test

build info:
  # Always runs: allows pipeline execution to happen even if no other tasks run.
  stage: build
  image: node:14
  tags:
    - docker
  rules:
    - if: $CI_PIPELINE_SOURCE != "push"
  script:
    - echo "This task give the CI/CD pipeline something to (almost always) run."
    - echo "  CI_PIPELINE_SOURCE  = $CI_PIPELINE_SOURCE"
    - echo "  CI_MERGE_REQUEST_ID = $CI_MERGE_REQUEST_ID"
    - echo "  CI_COMMIT_BRANCH    = $CI_COMMIT_BRANCH"

test common:
  stage: test
  image: node:14
  tags:
    - docker
  needs: ["build common"]
  rules:
    - if: "$CI_MERGE_REQUEST_ID != null"
      changes:
        - common/**/*
        - .gitlab-ci.yml
      when: always
    # Always build/test for schedule / manual "Run Pipeline" via web
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_PIPELINE_SOURCE == "web"
  before_script:
    - npm install -g npm@$NPM_VERSION
    - cd common
    - npm ci
  script:
    - npm run test-ci
  artifacts:
    expire_in: 1 week
    reports:
      junit:
        - common/junit.xml
      cobertura:
        - common/coverage/cobertura-coverage.xml

test caddy:
  stage: test
  image: caddy:2.4.6
  tags:
    - docker
  needs: []
  rules:
    - if: "$CI_MERGE_REQUEST_ID != null"
      changes:
        - caddy/**/*
        - .gitlab-ci.yml
      when: always
    # Always build/test for schedule / manual "Run Pipeline" via web
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_PIPELINE_SOURCE == "web"
  variables:
    DOMAIN: "example.com"
  script:
    - caddy validate --config caddy/Caddyfile

.deploy-script: &deploy-script
  - cp /var/cbr/.env ./.env
  - docker-compose -f docker-compose.yml -f docker-compose.deploy.yml build
  - docker-compose -f docker-compose.yml -f docker-compose.deploy.yml up --force-recreate -d
  - bash -c 'sleep 10'
  - docker exec cbr_django python manage.py migrate

deploy development:
  environment:
    name: development
    url: https://cbr-dev.cmpt.sfu.ca
  stage: deploy
  tags:
    - deploy-development
  rules:
    - if: "$CI_MERGE_REQUEST_ID == null && $CI_COMMIT_BRANCH == $DEV_BRANCH"
      when: on_success
  script:
    - *deploy-script

deploy staging:
  environment:
    name: staging
    url: https://cbr-stg.cmpt.sfu.ca
  stage: deploy
  tags:
    - deploy-staging
  rules:
    - if: "$CI_MERGE_REQUEST_ID == null && $CI_COMMIT_BRANCH == $STAGING_BRANCH"
      when: on_success
  script:
    - *deploy-script

deploy production:
  environment:
    name: production
    url: https://cbr.hopehealthaction.org
  stage: deploy
  tags:
    - deploy-production
  rules:
    - if: "$CI_MERGE_REQUEST_ID == null && $CI_COMMIT_BRANCH == $PROD_BRANCH"
      when: manual
  script:
    - *deploy-script

