stages:
  - build
  - build-docker
  - test
  - deploy

variables:
  DEV_BRANCH: "main"
  STG_BRANCH: "staging"
  PROD_BRANCH: "production"
  NPM_VERSION: "7.19.0"

build info:
  # Always runs: allows pipeline execution to happen even if no other tasks run.
  stage: build
  image: alpine:latest
  tags:
    - docker
  rules:
    - if: $CI_PIPELINE_SOURCE != "push"
  script:
    - echo "This task give the CI/CD pipeline something to (almost always) run."
    - echo "  CI_PIPELINE_SOURCE  = $CI_PIPELINE_SOURCE"
    - echo "  CI_MERGE_REQUEST_ID = $CI_MERGE_REQUEST_ID"
    - echo "  CI_COMMIT_BRANCH    = $CI_COMMIT_BRANCH"


build common:
  stage: build
  image: node:14
  tags:
    - docker
  needs: []
  rules:
    - if: "$CI_MERGE_REQUEST_ID != null"
      changes:
        - common/**/*
        - .gitlab-ci.yml
      when: always
    # Always build/test for schedule / manual "Run Pipeline" via web
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_PIPELINE_SOURCE == "web"
  before_script:
    - npm install -g npm@$NPM_VERSION
    - cd common
    - npm ci
  script:
    - npx prettier --check .
    - npx tsc

build mobile:
  stage: build
  image: node:14
  tags:
    - docker
  needs: []
  rules:
    - if: "$CI_MERGE_REQUEST_ID != null"
      changes:
        - common/**/*
        - mobile/**/*
        - .gitlab-ci.yml
      when: always
    # Always build/test for schedule / manual "Run Pipeline" via web
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_PIPELINE_SOURCE == "web"
  before_script:
    - npm install -g npm@$NPM_VERSION
    - cd mobile
    - npm uninstall @cbr/common
    - COMMON_PACK_NAME=$(npm pack ../common | tail -n 1)
    - npm install $COMMON_PACK_NAME
    - npm ci
  script:
    - npx prettier --check .
    - npx expo export --public-url https://ci-build.local

build web:
  stage: build
  image: node:14
  tags:
    - docker
  needs: []
  rules:
    # build on merge requests if there are changes
    - if: "$CI_MERGE_REQUEST_ID != null"
      changes:
        - common/**/*
        - web/**/*
        - .gitlab-ci.yml
      when: always
    # build on deployments
    - if: "$CI_COMMIT_BRANCH == $DEV_BRANCH || $CI_COMMIT_BRANCH == $STG_BRANCH || $CI_COMMIT_BRANCH == $PROD_BRANCH"
      when: always
    # Always build/test for schedule / manual "Run Pipeline" via web
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_PIPELINE_SOURCE == "web"
  before_script:
    - npm install -g npm@$NPM_VERSION
    - cd common
    - npm ci
    - cd ../web
    - npm ci
  script:
    - npx prettier --check .
    - GENERATE_SOURCEMAP=false npm run build
  after_script:
    - cd web/build && tar -czvf ../../web_build.tar.gz .
  artifacts:
    expire_in: 1 week
    paths:
      - web_build.tar.gz

build server:
  stage: build
  image: python:3.9.1-buster
  services:
    - name: postgres:13.1-alpine
      alias: test_postgres
  tags:
    - docker
  needs: []
  rules:
    - if: "$CI_MERGE_REQUEST_ID != null"
      changes:
        - server/**/*
        - .gitlab-ci.yml
      when: always
    - if: "$CI_COMMIT_BRANCH == $DEV_BRANCH || $CI_COMMIT_BRANCH == $STG_BRANCH || $CI_COMMIT_BRANCH == $PROD_BRANCH"
      when: always
    # Always build/test for schedule / manual "Run Pipeline" via web
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_PIPELINE_SOURCE == "web"
  variables:
    DOMAIN: "example.com"
    SECRET_KEY: "test"
    POSTGRES_DB: "cbr"
    POSTGRES_USER: "test"
    POSTGRES_PASSWORD: "test"
    POSTGRES_HOST: "test_postgres"
  before_script:
    - cd server
  script:
    - pip install -r requirements.txt
    - python -m black --check .
    - python manage.py check
    - python manage.py makemigrations --check
    - python manage.py test


test common:
  stage: test
  image: node:14
  tags:
    - docker
  needs: ["build common"]
  rules:
    - if: "$CI_MERGE_REQUEST_ID != null"
      changes:
        - common/**/*
        - .gitlab-ci.yml
      when: always
    # Always build/test for schedule / manual "Run Pipeline" via web
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_PIPELINE_SOURCE == "web"
  before_script:
    - npm install -g npm@$NPM_VERSION
    - cd common
    - npm ci
  script:
    - npm run test-ci
  artifacts:
    expire_in: 1 week
    reports:
      junit:
        - common/junit.xml
      cobertura:
        - common/coverage/cobertura-coverage.xml

test caddy:
  stage: test
  image: caddy:2.4.6
  tags:
    - docker
  needs: []
  rules:
    - if: "$CI_MERGE_REQUEST_ID != null"
      changes:
        - caddy/**/*
        - .gitlab-ci.yml
      when: always
    # Always build/test for schedule / manual "Run Pipeline" via web
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_PIPELINE_SOURCE == "web"
  variables:
    DOMAIN: "example.com"
  script:
    - caddy validate --config caddy/Caddyfile

.deploy-script: &export_image_tag
  # Set IMAGE_TAG to encode the date and SHA of the most recent commit.
  - export IMAGE_TAG=v$(git show -s --format=%cs $CI_COMMIT_SHA).`git rev-parse --short=8 $CI_COMMIT_SHA`
  # Display some useful info for understanding / debugging the pipeline
  - echo "Docker hub user ='$HUB_USER',     version='$IMAGE_TAG'"
  - echo "Full tag (backend) is               = $HUB_USER/$HUB_REPO_BACKEND:$IMAGE_TAG"
  - echo "Full tag (rev-proxy & frontend) is  = $HUB_USER/$HUB_REPO_FRONTEND:$IMAGE_TAG"
  - docker images


build-docker publish-docker-images:
  stage: build-docker
  tags:
    # Run on CI/CD server so it does not interfere with containers in active use on dev server.
    - deploy-dockerhub-shell
  rules:
    - if: "$CI_COMMIT_BRANCH == $DEV_BRANCH"
    - if: $CI_PIPELINE_SOURCE == "web"
  script:
    # Required environment variables defined by GitLab's settings:
    #   HUB_USER:           Docker Hub user
    #   HUB_TOKEN:          Docker Hub token (likely GitLab will "Mask")
    #   HUB_REPO_BACKEND:   Docker Hub project name for backend
    #   HUB_REPO_FRONTEND:  Docker Hub project name for frontend / caddy

    # Build images (tagged by docker-composition*.yml using IMAGE_TAG)
    - *export_image_tag
    - docker compose -f docker-compose.yml -f docker-compose.deploy.yml build
    
    # Push images to Docker Hub 
    - docker images
    - docker login -u $HUB_USER -p $HUB_TOKEN
    - docker push $HUB_USER/$HUB_REPO_BACKEND:$IMAGE_TAG
    - docker push $HUB_USER/$HUB_REPO_FRONTEND:$IMAGE_TAG
    - docker logout

    # Cleanup the image and any tags of that image
    # Run on the CI/CD server, so it can force delete these images because it does not run any of them as containers
    - docker images -a | grep -e "$HUB_REPO_BACKEND" -e "$HUB_REPO_FRONTEND" | awk '{print $3}' | xargs docker rmi --force
    - docker images


.deploy-script: &deploy-from-dockerhub
  - *export_image_tag
  - cp /var/cbr/.env ./.env
  - docker compose -f docker-compose.yml -f docker-compose.deploy.yml pull
  - docker compose -f docker-compose.yml -f docker-compose.deploy.yml up -d
  - docker image prune -f      # remove unused images since we just downloaded new ones
  - bash -c 'sleep 15'
  - docker exec cbr_django python manage.py migrate
  - docker images
  - docker ps -a
  - docker volume ls

.deploy-script: &retag-and-upload-dockerhub
  # Required environment variables passed into this function:
  #   BRANCH_TAG:         Determined by which branch we are building off: "dev", "staging", "prod"
  - *export_image_tag

  # Download images (docker skips if already be present)
  - echo "Trying to tag images of version '$IMAGE_TAG' with new tag '$BRANCH_TAG'"
  - | 
    echo "If you get 'Error response from daemon - manifest for ... not found - manifest unknown - manifest unknown'"
    echo "   it likely means the pipeline did not build and deploy a docker image for this commit."
    echo "   Was there a MR to this branch that did not get build for use on Dev server?"
  - echo "Downloading image = $HUB_USER/$HUB_REPO_BACKEND, tag = $IMAGE_TAG'..."
  - docker pull $HUB_USER/$HUB_REPO_BACKEND:$IMAGE_TAG
  - docker pull $HUB_USER/$HUB_REPO_FRONTEND:$IMAGE_TAG

  # Retag
  - docker tag $HUB_USER/$HUB_REPO_BACKEND:$IMAGE_TAG   $HUB_USER/$HUB_REPO_BACKEND:$BRANCH_TAG
  - docker tag $HUB_USER/$HUB_REPO_FRONTEND:$IMAGE_TAG  $HUB_USER/$HUB_REPO_FRONTEND:$BRANCH_TAG

  # Upload tags
  - docker images
  - docker login -u $HUB_USER -p $HUB_TOKEN
  - docker push $HUB_USER/$HUB_REPO_BACKEND:$BRANCH_TAG
  - docker push $HUB_USER/$HUB_REPO_FRONTEND:$BRANCH_TAG
  - docker logout

  # Cleanup (if in use as a container this will fail, so we tolerate failures)
  - docker rmi $HUB_USER/$HUB_REPO_BACKEND:$BRANCH_TAG || true
  - docker rmi $HUB_USER/$HUB_REPO_FRONTEND:$BRANCH_TAG || true
  - docker rmi $HUB_USER/$HUB_REPO_BACKEND:$IMAGE_TAG || true
  - docker rmi $HUB_USER/$HUB_REPO_FRONTEND:$IMAGE_TAG || true
  - docker images

  
deploy development:
  stage: deploy
  environment:
    name: development
    url: https://cbr-dev.cmpt.sfu.ca
  tags:
    - deploy-development
  variables:
    BRANCH_TAG: "dev"
  rules:
    - if: "$CI_COMMIT_BRANCH == $DEV_BRANCH"
  script:
    # After images are built, deploy to dev-server & tag with "dev"
    - *deploy-from-dockerhub
    - *retag-and-upload-dockerhub

deploy staging:
  stage: deploy
  environment:
    name: staging
    url: https://cbr-stg.cmpt.sfu.ca
  tags:
    - deploy-staging
  variables:
    BRANCH_TAG: "staging"
  rules:
    - if: "$CI_COMMIT_BRANCH == $STG_BRANCH"
    # TODO: REMOVE THIS!
    - if: $CI_PIPELINE_SOURCE != "push"
  script:
    - *deploy-from-dockerhub
    - *retag-and-upload-dockerhub

deploy production:
  stage: deploy
  tags:
    - deploy-dockerhub-shell
  variables:
    BRANCH_TAG: "prod"
  rules:
    - if: "$CI_COMMIT_BRANCH == $PROD_BRANCH"
  script:
    - *retag-and-upload-dockerhub
    # Production server's admin must manually log into the server and run the /root/update.sh script